name: Streamlit RAG App CI/CD (Trivy + Deploy)

on:
  push:
    branches:
      - main

permissions:
  contents: read
  # Required to upload security results to GitHub Security tab
  security-events: write

concurrency:
  group: deploy-main
  cancel-in-progress: true

jobs:
  # ====================================
  #  Setup & Install Dependencies
  # ====================================
  setup-environment:
    name: Setup Environment
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10' 
          cache: 'pip'

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Create app archive for deployment
        # Write archive to the parent directory (../app.tar.gz) to avoid the race condition.
        run: tar -czf ../app.tar.gz --exclude='./.git' --exclude='./venv' --exclude='./env' --exclude='./__pycache__' .
        
      - name: Upload app archive artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-archive
          path: app.tar.gz 
          retention-days: 1 

  # ====================================
  #  Security & Lint Scan Job
  # ====================================
  security-scan:
    name: Security Scan (Trivy + Gitleaks + Lint)
    runs-on: ubuntu-latest
    needs: setup-environment
    permissions:
      contents: read
      security-events: write
    
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
        
      # --- Trivy Vulnerability Scan (using dedicated action) ---
      - name: Trivy Scan (Filesystem)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          ignore-unfixed: true
          severity: 'HIGH,CRITICAL'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
          
 # --- Gitleaks Secret Scan (Direct Execution FIX) ---
      - name: Gitleaks Scan (Direct)
        run: |
          GITLEAKS_VERSION=v8.18.3
          GITLEAKS_URL="https://github.com/gitleaks/gitleaks/releases/download/${GITLEAKS_VERSION}/gitleaks_${GITLEAKS_VERSION}_linux_x64.tar.gz"
          
          echo "Installing Gitleaks ${GITLEAKS_VERSION} from ${GITLEAKS_URL}"
          
          # 1. Install necessary utility (if not present) and download the archive
          sudo apt-get update && sudo apt-get install -y wget
          wget ${GITLEAKS_URL} -O gitleaks.tar.gz
          
          # 2. Extract the file and move the binary to a common PATH location
          tar -xzf gitleaks.tar.gz gitleaks
          sudo mv gitleaks /usr/local/bin/
          sudo chmod +x /usr/local/bin/gitleaks
          rm gitleaks.tar.gz # Clean up the downloaded file
          
          # 3. Run Gitleaks directly from the PATH.
          echo "Starting Gitleaks scan..."
          gitleaks detect \
            --source=. \
            --format=sarif \
            --report-path=gitleaks-results.sarif || true
          
      - name: Verify Gitleaks SARIF File
        # Removed the 'exit 1' part of the debug step to prevent unnecessary job failure 
        # while troubleshooting, but the file check remains.
        run: ls -l gitleaks-results.sarif || echo "Gitleaks SARIF file not found after scan."
          
      - name: Upload Gitleaks results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3 
        with:
          sarif_file: 'gitleaks-results.sarif'
          
      - name: Run Flake8 Lint
        uses: py-actions/flake8@v2
        with:
          args: "--exclude=venv,env,__pycache__,.git,migrations"
          
  # ====================================
  #  Local Deploy Job
  # ====================================
  deploy:
    name: Deploy Streamlit App (Local)
    runs-on: ubuntu-latest
    needs: security-scan
    
    env:
      COHERE_API_KEY: ${{ secrets.COHERE_API_KEY }}
      PINECONE_API_KEY: ${{ secrets.PINECONE_API_KEY }}

    steps:
      - name: Download app archive
        uses: actions/download-artifact@v4
        with:
          name: app-archive
          path: .
      
      - name: Deploy and Launch App via SSH
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.GCP_HOST }}
          username: ${{ secrets.GCP_USER }}
          key: ${{ secrets.GCP_SSH_KEY }}
          port: ${{ secrets.GCP_PORT || 22 }}
          envs: COHERE_API_KEY,PINECONE_API_KEY 
          script: |
            set -e
            APP_DIR="rag-application"

            echo "Stopping existing Streamlit app..."
            sudo fuser -k 8501/tcp || true

            echo "Installing necessary system dependencies (if not present)..."
            sudo apt update
            sudo apt install -y python3 python3-venv python3-pip git curl rsync tar

            echo "Setting up application directory: $APP_DIR"
            rm -rf $APP_DIR
            mkdir -p $APP_DIR

            echo "Transferring and extracting latest application archive..."
            rsync -avz --progress app.tar.gz ${{ secrets.GCP_USER }}@${{ secrets.GCP_HOST }}:~
            
            # Now, execute commands on the remote VM:
            ssh ${{ secrets.GCP_USER }}@${{ secrets.GCP_HOST }} '
              set -e
              # Extract archive contents into the target application directory
              tar -xzf app.tar.gz -C '"$APP_DIR"'
              rm app.tar.gz # Clean up the archive on the VM

              cd '"$APP_DIR"'
              echo "Setting up Python virtual environment..."
              python3 -m venv env
              source env/bin/activate

              echo "Installing requirements..."
              pip install --upgrade pip
              pip install -r requirements.txt

              echo "Launching Streamlit app..."
              nohup bash -c '\''COHERE_API_KEY='"$COHERE_API_KEY"' PINECONE_API_KEY='"$PINECONE_API_KEY"' source env/bin/activate && \
              streamlit run streamlit_ui.py \
              --server.port 8501 \
              > streamlit.log 2>&1'\' &
            '
            echo "Streamlit deployment triggered! Check logs for status."