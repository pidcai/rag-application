name: Streamlit RAG App CI/CD (Trivy + Deploy)

on:
  push:
    branches:
      - main

permissions:
  contents: read
  security-events: write

concurrency:
  group: deploy-main
  cancel-in-progress: true

jobs:
  # ====================================
  #  Security & Lint Scan Job
  # ====================================
  security-scan:
    name: Security Scan (Trivy + Lint)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v5

      - name: Set up Python environment
        uses: actions/setup-python@v6
        with:
          python-version: '3.13'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install flake8 pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --format=sarif --output-file=flake8-results.sarif --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Upload flake8 results as artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: flake8-results
          path: flake8-results.sarif

      - name: Test with pytest
        run: |
          export PYTHONPATH=$PYTHONPATH:$(pwd)
          pytest -v

      # - name: Sonar scan
      #   uses: SonarSource/sonarqube-scan-action@v6
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #     SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      #   with:
      #     args: >
      #       -Dsonar.projectKey=sonar
      #       -Dsonar.sources=.


      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          ignore-unfixed: true
          severity: 'HIGH,CRITICAL'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: trivy-results
          path: trivy-results.txt

      - name: Upload Trivy results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ====================================
  #  Local Deploy Job
  # ====================================
  deploy:
    name: Deploy Streamlit App
    runs-on: ubuntu-latest
    needs: security-scan  # run only after scan

    env:
      COHERE_API_KEY: ${{ secrets.COHERE_API_KEY }}
      PINECONE_API_KEY: ${{ secrets.PINECONE_API_KEY }}

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
      
      - name: Deploy to GCP VM
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.GCP_HOST }}
          username: ${{ secrets.GCP_USER }}
          key: ${{ secrets.GCP_SSH_KEY }}
          port: ${{ secrets.GCP_PORT || 22 }}
          envs: COHERE_API_KEY,PINECONE_API_KEY
          script: |
            set -e

            echo "Stopping existing Streamlit app..."
            sudo fuser -k 8501/tcp || true

            echo "Installing dependencies..."
            #sudo apt update
            sudo apt install -y python3 python3-venv python3-pip git curl            

            echo "Removing old app..."
            rm -rf rag-application

            echo "Cloning latest repo..."
            git clone https://github.com/pidcai/rag-application.git
            cd rag-application

            echo "Setting up Python virtual environment..."
            python3 -m venv env
            source env/bin/activate

            echo "Installing requirements..."
            pip install --upgrade pip
            pip install -r requirements.txt

            echo "Launching Streamlit app..."
            nohup bash -c 'COHERE_API_KEY="${{ secrets.COHERE_API_KEY }}" \
            PINECONE_API_KEY="${{ secrets.PINECONE_API_KEY }}" \
            streamlit run streamlit_ui.py > streamlit.log 2>&1 &'

            echo " Streamlit deployment triggered!"