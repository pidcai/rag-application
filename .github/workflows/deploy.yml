name: Streamlit RAG App CI/CD (Trivy + Deploy)

on:
  push:
    branches:
      - main

permissions:
  contents: read
  # Required to upload security results to GitHub Security tab
  security-events: write

concurrency:
  group: deploy-main
  cancel-in-progress: true

jobs:
  # ====================================
  #  Setup & Install Dependencies
  # ====================================
  setup-environment:
    name: Setup Environment
    runs-on: ubuntu-latest
    
    # This job sets up the environment and artifacts needed by the next jobs
    
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Set up Python
        # Use a specific Python version, e.g., 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10' 
          cache: 'pip' # Caches dependencies for faster installs

      - name: Install dependencies
        run: pip install -r requirements.txt

      # --- Fix for 'file changed as we read it' error ---
      - name: Create app archive for deployment
        # Write archive to the parent directory (../app.tar.gz) to avoid the race condition.
        # Exclude common temporary folders.
        run: tar -czf ../app.tar.gz --exclude='./.git' --exclude='./venv' --exclude='./env' --exclude='./__pycache__' .
        
      - name: Upload app archive artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-archive
          # The archive file is located in the parent directory, but actions/upload-artifact can find it
          path: app.tar.gz 
          retention-days: 1 # Keep artifact for a short time

  # ====================================
  #  Security & Lint Scan Job
  # ====================================
  security-scan:
    name: Security Scan (Trivy + Gitleaks + Lint)
    runs-on: ubuntu-latest
    needs: setup-environment # Run after environment setup
    permissions:
      contents: read
      security-events: write
    
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
        
      # --- Trivy Vulnerability Scan (using dedicated action) ---
      - name: Trivy Scan (Filesystem)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          ignore-unfixed: true
          severity: 'HIGH,CRITICAL'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3 # Correct action for SARIF upload
        with:
          sarif_file: 'trivy-results.sarif'
          
      # --- Gitleaks Secret Scan (using dedicated action) ---
      - name: Gitleaks Scan
        # ðŸš¨ CORRECTION 1: Use the Gitleaks scanning action ðŸš¨
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # Tell Gitleaks to output the SARIF report to this file
          report: 'gitleaks-results.sarif' 
          # Note: The 'output' parameter is often redundant when using 'report'
          
      - name: Upload Gitleaks results to GitHub Security
        # ðŸš¨ CORRECTION 2: Use the correct CodeQL action for SARIF upload ðŸš¨
        uses: github/codeql-action/upload-sarif@v3 
        with:
          sarif_file: 'gitleaks-results.sarif'
          
      - name: Run Flake8 Lint
        uses: py-actions/flake8@v2
        with:
          args: "--exclude=venv,env,__pycache__,.git,migrations"
          
  # ====================================
  #  Local Deploy Job
  # ====================================
  deploy:
    name: Deploy Streamlit App (Local)
    runs-on: ubuntu-latest
    needs: security-scan # run only after scan (and thus setup)
    
    env:
      COHERE_API_KEY: ${{ secrets.COHERE_API_KEY }}
      PINECONE_API_KEY: ${{ secrets.PINECONE_API_KEY }}

    steps:
      - name: Download app archive
        uses: actions/download-artifact@v4
        with:
          name: app-archive
          path: .
      
      - name: Deploy and Launch App via SSH
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.GCP_HOST }}
          username: ${{ secrets.GCP_USER }}
          key: ${{ secrets.GCP_SSH_KEY }}
          port: ${{ secrets.GCP_PORT || 22 }}
          # Pass only the necessary envs to the remote server environment
          envs: COHERE_API_KEY,PINECONE_API_KEY 
          script: |
            set -e
            APP_DIR="rag-application"

            echo "Stopping existing Streamlit app..."
            # Graceful stop attempt first, then kill if needed
            sudo fuser -k 8501/tcp || true

            echo "Installing necessary system dependencies (if not present)..."
            # Ensure basic tools are installed for venv and unzipping
            sudo apt update
            sudo apt install -y python3 python3-venv python3-pip git curl rsync tar

            echo "Setting up application directory: $APP_DIR"
            rm -rf $APP_DIR
            mkdir -p $APP_DIR

            echo "Transferring and extracting latest application archive..."
            # This uses rsync to push the tar.gz file efficiently
            rsync -avz --progress app.tar.gz ${{ secrets.GCP_USER }}@${{ secrets.GCP_HOST }}:~
            tar -xzf app.tar.gz -C $APP_DIR
            rm app.tar.gz # Clean up the archive on the VM

            cd $APP_DIR

            echo "Setting up Python virtual environment..."
            python3 -m venv env
            source env/bin/activate

            echo "Installing requirements..."
            # This will install requirements again on the VM, ensuring a clean state
            pip install --upgrade pip
            pip install -r requirements.txt

            echo "Launching Streamlit app..."
            # The envs are now available on the remote machine via appleboy/ssh-action
            # The secrets are directly injected into the nohup command for process persistence
            nohup bash -c 'source env/bin/activate && \
              streamlit run streamlit_ui.py \
              --server.port 8501 \
              > streamlit.log 2>&1' &

            echo "Streamlit deployment triggered! Check logs for status."