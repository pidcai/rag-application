name: Streamlit RAG App CI/CD (Trivy + Deploy)

on:
  push:
    branches:
      - main

permissions:
  contents: read
  security-events: write

concurrency:
  group: deploy-main
  cancel-in-progress: true

jobs:
  # ====================================
  #  Security & Lint Scan Job
  # ====================================
  security-scan:
    name: Security Scan (Trivy + Lint)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Verify Python version
        run: python3 --version

      - name: Install dependencies
        run: |
          python3 -m venv env
          source env/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Trivy static analysis
        run: |
          # Clean up any old Trivy source entries
          sudo rm -f /etc/apt/sources.list.d/trivy.list
          sudo apt-get install wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy -y
          trivy fs . --ignore-unfixed --severity HIGH,CRITICAL --format table > trivy-results.txt

                
      - name: Upload Trivy scan report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report
          path: trivy-results.txt

      - name: Gitleaks Code Scan
        run: gitleaks detect source . -r gitleaks-report.json -f json

      - name: Set up Python venv
        run: |
          python3 -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install flake8
          # Exclude common folders: venv, env, __pycache__, .git, migrations
          flake8 . --exclude=venv,env,__pycache__,.git,migrations > flake8-report.txt || true

      - name: Upload lint report
        uses: actions/upload-artifact@v4
        with:
          name: flake8-report
          path: flake8-report.txt

  # ====================================
  #  Local Deploy Job
  # ====================================
  deploy:
    name: Deploy Streamlit App (Local)
    runs-on: self-hosted
    needs: security-scan  # run only after scan

    env:
      COHERE_API_KEY: ${{ secrets.COHERE_API_KEY }}
      PINECONE_API_KEY: ${{ secrets.PINECONE_API_KEY }}

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
      
      - name: Deploy to GCP VM
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.GCP_HOST }}
          username: ${{ secrets.GCP_USER }}
          key: ${{ secrets.GCP_SSH_KEY }}
          port: ${{ secrets.GCP_PORT || 22 }}
          envs: COHERE_API_KEY,PINECONE_API_KEY
          script: |
            set -e

            echo "Stopping existing Streamlit app..."
            sudo fuser -k 8501/tcp || true

            echo "Installing dependencies..."
            sudo apt update
            sudo apt install -y python3 python3-venv python3-pip git curl

            echo "present working directory"
            echo "${pwd}"

            echo "Removing old app..."
            rm -rf rag-application

            echo "Cloning latest repo..."
            git clone https://github.com/pidcai/rag-application.git
            cd rag-application

            echo "Setting up Python virtual environment..."
            python3 -m venv env
            source env/bin/activate

            echo "Installing requirements..."
            pip install --upgrade pip
            pip install -r requirements.txt

            echo "Launching Streamlit app..."
            nohup bash -c 'COHERE_API_KEY="${{ secrets.COHERE_API_KEY }}" \
            PINECONE_API_KEY="${{ secrets.PINECONE_API_KEY }}" \
            streamlit run streamlit_ui.py > streamlit.log 2>&1 &'

            echo " Streamlit deployment triggered!"