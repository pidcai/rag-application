name: Deploy Streamlit RAG App to GCP VM

on:
  push:
    branches:
      - main

permissions:
  contents: read         # allows checking out code
  security-events: write # allows uploading SARIF/code scanning results

concurrency:
  group: deploy-main
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      COHERE_API_KEY: ${{ secrets.COHERE_API_KEY }}
      PINECONE_API_KEY: ${{ secrets.PINECONE_API_KEY }}

    steps:
      # --- Checkout Source Code ---
      - name: Checkout code
        uses: actions/checkout@v4

      # --- Setup Python Environment ---
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # --- DevSecOps: Security and Quality Gates (Trivy) ---
      - name: Trivy filesystem scan (code + dependencies)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: fs
          severity: CRITICAL,HIGH
          ignore-unfixed: true
          exit-code: '1'  # Fail the pipeline if high/critical vulnerabilities are found
          format: sarif
          output: trivy-results.sarif

      - name: Upload Trivy results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-results.sarif

      # --- Lint and Style Check ---
      - name: Lint and style check
        run: |
          pip install flake8
          flake8 . > flake8-report.txt || true

      - name: Upload lint report
        uses: actions/upload-artifact@v4
        with:
          name: flake8-report
          path: flake8-report.txt

      # --- Deployment Phase ---
      - name: Deploy to GCP VM
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.GCP_HOST }}
          username: ${{ secrets.GCP_USER }}
          key: ${{ secrets.GCP_SSH_KEY }}
          port: ${{ secrets.GCP_PORT || 22 }}
          envs: COHERE_API_KEY,PINECONE_API_KEY
          script: |
            set -e

            echo "Stopping existing Streamlit app (if any)..."
            sudo fuser -k 8501/tcp || true

            echo "Installing dependencies..."
            sudo apt update -y
            sudo apt install -y python3 python3-venv python3-pip git curl

            echo "Removing old app and cloning latest version..."
            rm -rf rag-application
            git clone https://github.com/pidcai/rag-application.git
            cd rag-application

            echo "Setting up Python virtual environment..."
            python3 -m venv env
            source env/bin/activate

            echo "Installing Python requirements..."
            pip install --upgrade pip
            pip install -r requirements.txt

            echo "Launching Streamlit app..."
            nohup env COHERE_API_KEY="$COHERE_API_KEY" \
                      PINECONE_API_KEY="$PINECONE_API_KEY" \
                      streamlit run streamlit_ui.py > streamlit.log 2>&1 &

            echo "Waiting for Streamlit to start..."
            sleep 5

            echo "Checking Streamlit app status..."
            if curl -f http://localhost:8501 > /dev/null 2>&1; then
              echo "✅ Streamlit app deployed successfully!"
            else
              echo "⚠️ Warning: Streamlit app may not have started yet."
            fi

